org 0x7C00
bits 16

start:
	cli
	mov ah, 0 ; cls
	mov al, 3
	int 10h

	mov ah, 1  ; disable cursor
	mov ch, 20h
	int 10h

	mov dl, 30 ; starting position, center of video mode 3 (80x25) - size of small ascii qr code (21x11)
	mov dh, 6
	mov bh, 0
	mov ah, 2
	int 10h

	mov ax, 1003h ; disable blinking, necessary for white bg
	mov bl, 0
	int 10h

	mov ah, 6 ; change colors, black on white
	mov al, 0
	mov cx, 0
	mov dx, 184Fh
	mov bh, 0F0h
	int 10h

	mov si, qr_string
	call write_string

	; python ascii.py -ns rawrower
	qr_string db 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xFF, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xFF, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDB, 0xFF, 0xDC, 0xDC, 0xDC, 0xFF, 0xDB, 0xFF, 0xDF, 0xDB, 0xDC, 0xDB, 0xDF, 0xFF, 0xDB, 0xFF, 0xDC, 0xDC, 0xDC, 0xFF, 0xDB, 0xDB, 0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xDB, 0xFF, 0xDC, 0xDF, 0xFF, 0xDF, 0xDB, 0xFF, 0xDB, 0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xDB, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDB, 0xFF, 0xDB, 0xFF, 0xDB, 0xFF, 0xDC, 0xFF, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDB, 0xDC, 0xDC, 0xDC, 0xFF, 0xFF, 0xDC, 0xDC, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xFF, 0xFF, 0xDC, 0xDC, 0xDC, 0xDB, 0xFF, 0xDF, 0xDF, 0xDB, 0xDC, 0xDC, 0xDC, 0xDB, 0xDB, 0xFF, 0xFF, 0xDC, 0xFF, 0xDF, 0xDB, 0xDF, 0xDF, 0xFF, 0xDB, 0xDC, 0xFF, 0xDC, 0xDB, 0xDC, 0xDB, 0xDC, 0xDC, 0xDC, 0xFF, 0xDF, 0xFF, 0xDF, 0xDC, 0xDC, 0xDF, 0xDC, 0xDF, 0xFF, 0xDC, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xFF, 0xDF, 0xDC, 0xDB, 0xDB, 0xDC, 0xDB, 0xDF, 0xFF, 0xDB, 0xDF, 0xFF, 0xDF, 0xDB, 0xDB, 0xFF, 0xDC, 0xDC, 0xDC, 0xFF, 0xDB, 0xFF, 0xDF, 0xFF, 0xFF, 0xDB, 0xDC, 0xDB, 0xDB, 0xDF, 0xDB, 0xDF, 0xFF, 0xDC, 0xFF, 0xDB, 0xFF, 0xDB, 0xDB, 0xDB, 0xFF, 0xDB, 0xFF, 0xDC, 0xDC, 0xDB, 0xFF, 0xFF, 0xFF, 0xDC, 0xDF, 0xDB, 0xDC, 0xFF, 0xDC, 0xDC, 0xDB, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDB, 0xFF, 0xDB, 0xFF, 0xDC, 0xFF, 0xDF, 0xFF, 0xDC, 0xDB, 0xDC, 0xDB, 0xFF, 0xFF, 0xDC, 0x00

write_string:
.repeat:
	mov ah, 0Eh ; print next character
	lodsb
	or al, al ; if no next character then done
	je .done
	int 10h
	mov bh, 0 ; check is newline is necessary
	mov ah, 3
	int 10h
	cmp dl, 30+21 ; newline each 21 chars for small qr code
	je .cursor
	jmp .repeat
.cursor:
	mov dl, 30 ; newline
	add dh, 1 ; go to next line
	mov ah, 2
	int 10h
	jmp .repeat
.done:
	mov ah, 86h ; wait 4 million microseconds
	mov cx, 003Dh
	mov dx, 0900h
	int 15h
	mov ax, 5301h ; possibly redundant but connect to apm api just in case
	mov bx, 0
	int 15h
	mov ax, 5307h ; shutdown
	mov bx, 1
	mov cx, 3
	int 15h
	hlt

	times 510-($-$$) db 0 ; padding
	dw 0xAA55 ; magic